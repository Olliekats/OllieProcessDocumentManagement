import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { Document, Paragraph, TextRun, HeadingLevel, AlignmentType, Packer, Table, TableRow, TableCell, WidthType, BorderStyle, UnderlineType } from 'docx';
import ExcelJS from 'exceljs';
import pptxgen from 'pptxgenjs';

export interface ExportOptions {
  title: string;
  subtitle?: string;
  processCode?: string;
  version?: string;
  author?: string;
  date?: Date;
}

function parseArtifactData(content: any) {
  if (typeof content === 'string') {
    try {
      return JSON.parse(content);
    } catch {
      return { content };
    }
  }
  return content;
}

export async function exportSOPToPDF(artifactData: any, options: ExportOptions): Promise<Blob> {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  const margin = 20;

  const data = parseArtifactData(artifactData);

  addSOPCoverPage(doc, options);

  if (data.sections && Array.isArray(data.sections)) {
    doc.addPage();
    let yPos = 20;

    for (const section of data.sections) {
      if (yPos > pageHeight - 40) {
        doc.addPage();
        yPos = 20;
      }

      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(31, 73, 125);
      doc.text(section.section || 'Section', margin, yPos);
      yPos += 10;

      doc.setFontSize(11);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(0, 0, 0);
      const content = section.content || '';
      const lines = doc.splitTextToSize(content, pageWidth - 2 * margin);

      for (const line of lines) {
        if (yPos > pageHeight - 30) {
          doc.addPage();
          yPos = 20;
        }
        doc.text(line, margin, yPos);
        yPos += 7;
      }

      yPos += 5;
    }
  }

  addPageNumbers(doc);
  addFooter(doc, options);

  return doc.output('blob');
}

function addSOPCoverPage(doc: jsPDF, options: ExportOptions) {
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  doc.setFillColor(31, 73, 125);
  doc.rect(0, 0, pageWidth, 40, 'F');

  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(255, 255, 255);
  doc.text('STANDARD OPERATING PROCEDURES', pageWidth / 2, 25, { align: 'center' });

  doc.setFontSize(24);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(31, 73, 125);
  doc.text(options.title, pageWidth / 2, 80, { align: 'center', maxWidth: pageWidth - 40 });

  doc.setFillColor(220, 230, 241);
  doc.roundedRect(30, 110, pageWidth - 60, 80, 3, 3, 'F');

  doc.setFontSize(11);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(31, 73, 125);

  let detailY = 125;
  if (options.processCode) {
    doc.text('Process Code:', 40, detailY);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(0, 0, 0);
    doc.text(options.processCode, 90, detailY);
    detailY += 15;
  }

  doc.setFont('helvetica', 'bold');
  doc.setTextColor(31, 73, 125);
  doc.text('Version:', 40, detailY);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(0, 0, 0);
  doc.text(options.version || '1.0', 90, detailY);
  detailY += 15;

  doc.setFont('helvetica', 'bold');
  doc.setTextColor(31, 73, 125);
  doc.text('Effective Date:', 40, detailY);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(0, 0, 0);
  doc.text((options.date || new Date()).toLocaleDateString(), 90, detailY);
  detailY += 15;

  doc.setFont('helvetica', 'bold');
  doc.setTextColor(31, 73, 125);
  doc.text('Approved By:', 40, detailY);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(0, 0, 0);
  doc.text(options.author || 'Operations Management', 90, detailY);
}

function addPageNumbers(doc: jsPDF) {
  const pageCount = doc.internal.pages.length - 1;
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(100, 100, 100);
    doc.text(
      `Page ${i} of ${pageCount}`,
      doc.internal.pageSize.getWidth() / 2,
      doc.internal.pageSize.getHeight() - 10,
      { align: 'center' }
    );
  }
}

function addFooter(doc: jsPDF, options: ExportOptions) {
  const pageCount = doc.internal.pages.length - 1;
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'italic');
    doc.setTextColor(150, 150, 150);
    doc.text(
      'Generated by OllieProcess',
      20,
      doc.internal.pageSize.getHeight() - 10
    );
    doc.text(
      `Version ${options.version || '1.0'}`,
      doc.internal.pageSize.getWidth() - 20,
      doc.internal.pageSize.getHeight() - 10,
      { align: 'right' }
    );
  }
}

export async function exportRACIToPDF(artifactData: any, options: ExportOptions): Promise<Blob> {
  const doc = new jsPDF();
  const data = parseArtifactData(artifactData);

  addRACICoverPage(doc, options);

  if (data.matrix && Array.isArray(data.matrix)) {
    doc.addPage();

    const tableData = data.matrix.map((row: any) => [
      row.task || '',
      row.responsible || '',
      row.accountable || '',
      row.consulted || '',
      row.informed || ''
    ]);

    autoTable(doc, {
      startY: 30,
      head: [['Task/Activity', 'Responsible', 'Accountable', 'Consulted', 'Informed']],
      body: tableData,
      theme: 'grid',
      headStyles: {
        fillColor: [31, 73, 125],
        textColor: [255, 255, 255],
        fontStyle: 'bold',
        fontSize: 11
      },
      styles: {
        fontSize: 10,
        cellPadding: 5,
        lineColor: [200, 200, 200],
        lineWidth: 0.1
      },
      columnStyles: {
        0: { cellWidth: 50 },
        1: { cellWidth: 30 },
        2: { cellWidth: 30 },
        3: { cellWidth: 30 },
        4: { cellWidth: 30 }
      },
      alternateRowStyles: {
        fillColor: [245, 245, 245]
      }
    });
  }

  addPageNumbers(doc);
  addFooter(doc, options);

  return doc.output('blob');
}

function addRACICoverPage(doc: jsPDF, options: ExportOptions) {
  const pageWidth = doc.internal.pageSize.getWidth();

  doc.setFillColor(31, 73, 125);
  doc.rect(0, 0, pageWidth, 40, 'F');

  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(255, 255, 255);
  doc.text('RACI MATRIX', pageWidth / 2, 25, { align: 'center' });

  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(31, 73, 125);
  doc.text(options.title, pageWidth / 2, 80, { align: 'center', maxWidth: pageWidth - 40 });

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(100, 100, 100);
  doc.text(
    `Generated: ${(options.date || new Date()).toLocaleDateString()}`,
    pageWidth / 2,
    100,
    { align: 'center' }
  );
}

export async function exportRiskToPDF(artifactData: any, options: ExportOptions): Promise<Blob> {
  const doc = new jsPDF('landscape');
  const data = parseArtifactData(artifactData);

  addRiskCoverPage(doc, options);

  if (data.risks && Array.isArray(data.risks)) {
    doc.addPage();

    const tableData = data.risks.map((risk: any) => [
      risk.risk || '',
      risk.likelihood || '',
      risk.impact || '',
      risk.control || '',
      risk.mitigation || ''
    ]);

    autoTable(doc, {
      startY: 30,
      head: [['Risk', 'Likelihood', 'Impact', 'Control', 'Mitigation']],
      body: tableData,
      theme: 'grid',
      headStyles: {
        fillColor: [231, 76, 60],
        textColor: [255, 255, 255],
        fontStyle: 'bold',
        fontSize: 11
      },
      styles: {
        fontSize: 9,
        cellPadding: 5,
        lineColor: [200, 200, 200],
        lineWidth: 0.1
      },
      columnStyles: {
        0: { cellWidth: 50 },
        1: { cellWidth: 30 },
        2: { cellWidth: 30 },
        3: { cellWidth: 60 },
        4: { cellWidth: 60 }
      },
      alternateRowStyles: {
        fillColor: [252, 245, 245]
      }
    });
  }

  addPageNumbers(doc);
  addFooter(doc, options);

  return doc.output('blob');
}

function addRiskCoverPage(doc: jsPDF, options: ExportOptions) {
  const pageWidth = doc.internal.pageSize.getWidth();

  doc.setFillColor(231, 76, 60);
  doc.rect(0, 0, pageWidth, 40, 'F');

  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(255, 255, 255);
  doc.text('RISK & CONTROL MATRIX', pageWidth / 2, 25, { align: 'center' });

  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(231, 76, 60);
  doc.text(options.title, pageWidth / 2, 80, { align: 'center', maxWidth: pageWidth - 40 });

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.setTextColor(100, 100, 100);
  doc.text(
    `Generated: ${(options.date || new Date()).toLocaleDateString()}`,
    pageWidth / 2,
    100,
    { align: 'center' }
  );
}

export async function downloadFile(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}
